{"version":3,"sources":["utils/utils.js","map/Map.js","res/data_for_visualisations.csv","res/data_bar_chart_race.csv","race/Race.js","line/Line.js","App.js","index.js"],"names":["mapToHue","value","min","max","in_min","in_max","out_min","out_max","rangeMap","createRange","ranges","GNI","total_msw_total_msw_generated_tons_year","waste_treatment_recycling_percent","population","msw_per_capita_in_kg","axisMapping","composition_food_organic_waste_percent","composition_glass_percent","composition_metal_percent","composition_other_percent","composition_paper_cardboard_percent","composition_plastic_percent","composition_rubber_leather_percent","composition_wood_percent","composition_yard_garden_green_waste_percent","calcColor","x","y","xRange","yRange","isNaN","Color","rgb","hex","Map","data","useState","map","setMap","polygons","setPolygons","xAxis","setxAxis","yAxis","setyAxis","xAxisLegend","setXAxisLegend","yAxisLegend","setYAxisLegend","isMapCreated","setIsMapCreated","useEffect","newMap","am4core","am4maps","geodata","am4geodata_worldLow","projection","Miller","homeZoomLevel","homeGeoPoint","longitude","latitude","polygonSeries","series","push","useGeodata","exclude","legendContainer","chartContainer","createChild","dx","dy","width","height","background","fill","fillOpacity","stroke","strokeOpacity","strokeWidth","legend","align","layout","i","j","col","rect","legendXAxis","text","fontWeight","legendYAxis","rotation","currentViewData","_","country","xVal","Math","round","yVal","get","values","reduce","acc","_key","desc","id","ID","polygonTemplate","mapPolygons","template","tooltip","forEach","key","concat","tooltipText","propertyFields","className","style","onChange","selected","target","Race","am4themes_animated","chart","am4charts","padding","label","plotContainer","horizontalCenter","verticalCenter","fontSize","playButton","events","on","event","isActive","year","interval","setInterval","nextYear","stepDuration","play","clearInterval","categoryAxis","yAxes","renderer","grid","location","dataFields","category","minGridDistance","inversed","disabled","valueAxis","xAxes","rangeChangeEasing","linear","rangeChangeDuration","extraMax","categoryY","valueX","columns","column","cornerRadiusBottomRight","cornerRadiusTopRight","interpolationDuration","interpolationEasing","labelBullet","bullets","textAlign","zoomOutButton","adapter","add","_fill","colors","getIndex","dataItem","index","toString","sortBySeries","JSON","parse","stringify","zoom","start","end","dataItems","length","setTimeout","newData","invalidateRawData","raceRange","Array","from","Line","countryA","setCountryA","countryB","setCountryB","seriesA","setSeriesA","seriesB","setSeriesB","setChart","newChart","dateAxis","title","countryASeries","valueY","dateX","pointerOrientation","countryBSeries","cursor","fullWidthLineX","lineX","lineY","transformedData","date","valA","parseInt","valB","Date","name","countries","c","App","mapData","setMapData","raceData","setRaceData","lineData","setlineData","currentElement","setCurrentElement","fetch","mapPath","then","res","csv","Papa","delimiter","header","wastePath","groupBy","Country","elements","onClick","position","top","left","right","bottom","justifyContent","alignItems","zIndex","border","outline","opacity","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7679525.chunk.js","sourcesContent":["export const rangeMap = (value, in_min, in_max, out_min, out_max) =>\n    ((value - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min;\n\nexport const mapToHue = (value, min, max) => rangeMap(value, min, max, 50, 200);\n","import React, { useEffect, useState } from 'react';\nimport _ from 'lodash';\n\nimport * as am4core from '@amcharts/amcharts4/core';\nimport * as am4maps from '@amcharts/amcharts4/maps';\nimport am4geodata_worldLow from '@amcharts/amcharts4-geodata/worldLow';\nimport Color from 'color';\n\nimport { mapToHue } from '../utils/utils';\n\nconst createRange = (min, max) => {\n    return { min, max };\n};\n\nconst ranges = {\n    GNI: createRange(99, 190017),\n    total_msw_total_msw_generated_tons_year: createRange(0, 258000000),\n    waste_treatment_recycling_percent: createRange(0, 100),\n    population: createRange(11097, 1371220000),\n    msw_per_capita_in_kg: createRange(0, 1587),\n};\n\nconst axisMapping = {\n    GNI: 'GNI per capita ($)',\n    waste_treatment_recycling_percent: 'Recycling rate (%)',\n    population: 'Population',\n    msw_per_capita_in_kg: 'Waste per capita (kg)',\n    total_msw_total_msw_generated_tons_year: 'Total waste generated (t)',\n    composition_food_organic_waste_percent: 'Fraction food (%)',\n    composition_glass_percent: 'Fraction glass (%)',\n    composition_metal_percent: 'Fraction metal (%)',\n    composition_other_percent: 'Fraction other (%)',\n    composition_paper_cardboard_percent: 'Fraction paper & cardboard (%)',\n    composition_plastic_percent: 'Fraction plastic (%)',\n    composition_rubber_leather_percent: 'Fraction rubber & leather (%)',\n    composition_wood_percent: 'Fraction wood (%)',\n    composition_yard_garden_green_waste_percent: 'Fraction organic (%)',\n};\n\nconst calcColor = (x, y, xRange, yRange) => {\n    if (isNaN(x) || isNaN(y) || x === 0 || y === 0) return Color.rgb(222, 222, 222).hex();\n    const color = Color.rgb(mapToHue(x, xRange.min, xRange.max), mapToHue(y, yRange.min, yRange.max), 100);\n    return color.hex();\n};\n\nfunction Map({ data }) {\n    const [map, setMap] = useState();\n    const [polygons, setPolygons] = useState();\n\n    const [xAxis, setxAxis] = useState('GNI');\n    const [yAxis, setyAxis] = useState('msw_per_capita_in_kg');\n\n    const [xAxisLegend, setXAxisLegend] = useState();\n    const [yAxisLegend, setYAxisLegend] = useState();\n\n    const [isMapCreated, setIsMapCreated] = useState(false);\n\n    // Create map hook\n    useEffect(() => {\n        const newMap = am4core.create('mapdiv', am4maps.MapChart);\n        newMap.geodata = am4geodata_worldLow;\n        newMap.projection = new am4maps.projections.Miller();\n\n        newMap.homeZoomLevel = 3;\n        newMap.homeGeoPoint = { longitude: 12, latitude: 54 };\n\n        setMap(newMap);\n\n        // Polygons\n        const polygonSeries = newMap.series.push(new am4maps.MapPolygonSeries());\n        polygonSeries.useGeodata = true;\n        polygonSeries.exclude = ['AQ'];\n        setPolygons(polygonSeries);\n\n        // Create Legend\n        const legendContainer = newMap.chartContainer.createChild(am4core.Container);\n\n        legendContainer.x = am4core.percent(0);\n        legendContainer.y = am4core.percent(100);\n        legendContainer.dx = 25;\n        legendContainer.dy = -275;\n        legendContainer.width = 250;\n        legendContainer.height = 250;\n        legendContainer.background.fill = am4core.color('#000');\n        legendContainer.background.fillOpacity = 0.3;\n        legendContainer.background.stroke = am4core.color('#000');\n        legendContainer.background.strokeOpacity = 0.4;\n        legendContainer.background.strokeWidth = 2;\n\n        const legend = legendContainer.createChild(am4core.Container);\n\n        legend.width = 200;\n        legend.height = 200;\n        legend.align = 'center';\n        legend.dy = 25;\n        legend.layout = 'grid';\n        legend.background.stroke = am4core.color('#000');\n        legend.background.strokeOpacity = 0.8;\n        legend.background.strokeWidth = 3;\n\n        for (let i = 0; i < 5; i++) {\n            for (let j = 0; j < 5; j++) {\n                const col = Color.rgb(40 * j, 40 * i, 100);\n                const rect = legend.createChild(am4core.Rectangle);\n                rect.width = 40;\n                rect.height = 40;\n                rect.fill = col.hex();\n            }\n        }\n\n        // Legend axis\n        const legendXAxis = legendContainer.createChild(am4core.Label);\n        legendXAxis.x = am4core.percent(10);\n        legendXAxis.y = am4core.percent(0.5);\n        legendXAxis.text = 'GNI per capita ($) --->';\n        legendXAxis.fontWeight = 'bold';\n        setXAxisLegend(legendXAxis);\n\n        const legendYAxis = legendContainer.createChild(am4core.Label);\n        legendYAxis.x = am4core.percent(0.5);\n        legendYAxis.y = am4core.percent(90);\n        legendYAxis.rotation = -90;\n        legendYAxis.text = '<--- Waste per capita (kg)';\n        legendYAxis.fontWeight = 'bold';\n        setYAxisLegend(legendYAxis);\n\n        setIsMapCreated(true);\n    }, []);\n\n    // Generate polygons from data\n    useEffect(() => {\n        if (data && isMapCreated) {\n            const currentViewData = _.map(data, (country) => {\n                const xVal = Math.round(country[xAxis]);\n                const yVal = Math.round(country[yAxis]);\n                const xRange = _.get(ranges, xAxis);\n                const yRange = _.get(ranges, yAxis);\n\n                xAxisLegend.text = `${axisMapping[xAxis]} --->`;\n                yAxisLegend.text = `<--- ${axisMapping[yAxis]}`;\n\n                const values = _.reduce(\n                    axisMapping,\n                    (acc, _key, desc) => {\n                        const value = Math.round(_.get(country, desc));\n                        return { ...acc, [desc]: isNaN(value) || value === 0 ? 'no data' : value };\n                    },\n                    {}\n                );\n\n                return {\n                    id: country.ID,\n                    xAxis: xVal,\n                    yAxis: yVal,\n                    fill: am4core.color(calcColor(xVal, yVal, xRange, yRange)),\n                    ...values,\n                };\n            });\n\n            polygons.data = currentViewData;\n\n            const polygonTemplate = polygons.mapPolygons.template;\n\n            let tooltip = '[bold]{name}[/]';\n            _.forEach(axisMapping, (key, value) => {\n                if (value === xAxis || value === yAxis) {\n                    tooltip = tooltip.concat(`\\n[bold]${key}: {${value}}[/]`);\n                } else {\n                    tooltip = tooltip.concat(`\\n${key}: {${value}}`);\n                }\n            });\n            polygonTemplate.tooltipText = tooltip;\n\n            polygonTemplate.propertyFields.fill = 'fill';\n        }\n    }, [data, map, polygons, xAxis, yAxis]);\n\n    return (\n        <>\n            <div className={''} style={{ width: '100%', height: '100%' }}>\n                <form className={'d-flex justify-content-center p-2'}>\n                    <select className={'mr-2'} value={xAxis} onChange={(selected) => setxAxis(selected.target.value)}>\n                        <option value={'GNI (income in $)'}>GNI per capita ($)</option>\n                        <option value={'population'}>Population</option>\n                        <option value={'total_msw_total_msw_generated_tons_year'}>Total waste generated (t)</option>\n                        <option value={'msw_per_capita_in_kg'}>Waste per capita (kg)</option>\n                    </select>\n                    <select value={yAxis} onChange={(selected) => setyAxis(selected.target.value)}>\n                        <option value={'total_msw_total_msw_generated_tons_year'}>Total waste generated (t)</option>\n                        <option value={'msw_per_capita_in_kg'}>Waste per capita (kg)</option>\n                        <option value={'waste_treatment_recycling_percent'}>Recycling rate (%)</option>\n                    </select>\n                </form>\n\n                <div className={'border rounded'} id=\"mapdiv\" style={{ width: '100%', height: '100%' }} />\n            </div>\n        </>\n    );\n}\n\nexport default Map;\n","export default __webpack_public_path__ + \"static/media/data_for_visualisations.f086fa6a.csv\";","export default __webpack_public_path__ + \"static/media/data_bar_chart_race.6bb34650.csv\";","import React, { useEffect } from 'react';\n\nimport * as am4core from '@amcharts/amcharts4/core';\nimport * as am4charts from '@amcharts/amcharts4/charts';\nimport am4themes_animated from '@amcharts/amcharts4/themes/animated';\n\nfunction Race({ data }) {\n    useEffect(() => {\n        if (!data) return;\n\n        am4core.useTheme(am4themes_animated);\n\n        const chart = am4core.create('racediv', am4charts.XYChart);\n        chart.padding(40, 40, 40, 40);\n\n        const label = chart.plotContainer.createChild(am4core.Label);\n        label.x = am4core.percent(97);\n        label.y = am4core.percent(95);\n        label.horizontalCenter = 'right';\n        label.verticalCenter = 'middle';\n        label.dx = -15;\n        label.fontSize = 50;\n\n        const playButton = chart.plotContainer.createChild(am4core.PlayButton);\n        playButton.x = am4core.percent(97);\n        playButton.y = am4core.percent(95);\n        playButton.dy = -2;\n        playButton.verticalCenter = 'middle';\n        playButton.events.on('toggled', function (event) {\n            if (event.target.isActive) {\n                play();\n            } else {\n                stop();\n            }\n        });\n\n        const stepDuration = 2000;\n\n        let categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());\n        categoryAxis.renderer.grid.template.location = 0;\n        categoryAxis.dataFields.category = 'id';\n        categoryAxis.renderer.minGridDistance = 1;\n        categoryAxis.renderer.inversed = true;\n        categoryAxis.renderer.grid.template.disabled = true;\n\n        let valueAxis = chart.xAxes.push(new am4charts.ValueAxis());\n        valueAxis.min = 0;\n        valueAxis.rangeChangeEasing = am4core.ease.linear;\n        valueAxis.rangeChangeDuration = stepDuration;\n        valueAxis.extraMax = 0.1;\n\n        const series = chart.series.push(new am4charts.ColumnSeries());\n        series.dataFields.categoryY = 'id';\n        series.dataFields.valueX = 'value';\n        series.tooltipText = '{valueX.value}';\n        series.columns.template.strokeOpacity = 0;\n        series.columns.template.column.cornerRadiusBottomRight = 5;\n        series.columns.template.column.cornerRadiusTopRight = 5;\n        series.interpolationDuration = stepDuration;\n        series.interpolationEasing = am4core.ease.linear;\n\n        const labelBullet = series.bullets.push(new am4charts.LabelBullet());\n        labelBullet.label.horizontalCenter = 'right';\n        labelBullet.label.text = \"{values.valueX.workingValue.formatNumber('#.as')}\";\n        labelBullet.label.textAlign = 'end';\n        labelBullet.label.dx = -10;\n\n        chart.zoomOutButton.disabled = true;\n\n        series.columns.template.adapter.add('fill', function (_fill, target) {\n            return chart.colors.getIndex(target.dataItem.index);\n        });\n\n        let year = 2000;\n        label.text = year.toString();\n\n        let interval;\n\n        function play() {\n            if (year >= 2018) {\n                year = 1999;\n            }\n            interval = setInterval(function () {\n                nextYear();\n            }, stepDuration);\n            nextYear();\n        }\n\n        function stop() {\n            if (interval) {\n                clearInterval(interval);\n            }\n        }\n\n        function nextYear() {\n            year++;\n\n            if (year > 2018) {\n                // repeat\n                // year = 2000;\n\n                // stop at 2018\n                year = 2018;\n                playButton.isActive = false;\n            }\n\n            const newData = data[year];\n            for (let i = 0; i < chart.data.length; i++) {\n                chart.data[i].value = newData[i].value;\n            }\n\n            series.interpolationDuration = stepDuration;\n            valueAxis.rangeChangeDuration = stepDuration;\n\n            chart.invalidateRawData();\n            label.text = year.toString();\n        }\n\n        categoryAxis.sortBySeries = series;\n\n        chart.data = JSON.parse(JSON.stringify(data[year]));\n\n        series.events.on('inited', function () {\n            categoryAxis.zoom({ start: 0, end: 20 / categoryAxis.dataItems.length });\n            setTimeout(function () {\n                playButton.isActive = true;\n            }, 2000);\n        });\n    }, [data]);\n\n    return <div id=\"racediv\" style={{ width: '100%', height: '100%' }} />;\n}\n\nexport default Race;\n","import React, { useEffect, useState } from 'react';\n\nimport * as am4core from '@amcharts/amcharts4/core';\nimport * as am4charts from '@amcharts/amcharts4/charts';\nimport am4themes_animated from '@amcharts/amcharts4/themes/animated';\n\nconst raceRange = Array.from({ length: 19 }, (_, i) => i + 2000);\n\n// TODO lots of duplication\n\nfunction Line({ data }) {\n    const [countryA, setCountryA] = useState('Germany');\n    const [countryB, setCountryB] = useState('Finland');\n\n    const [seriesA, setSeriesA] = useState();\n    const [seriesB, setSeriesB] = useState();\n\n    const [chart, setChart] = useState();\n\n    useEffect(() => {\n        am4core.useTheme(am4themes_animated);\n\n        const newChart = am4core.create('linediv', am4charts.XYChart);\n\n        // Axis'\n        const dateAxis = newChart.xAxes.push(new am4charts.DateAxis());\n        const valueAxis = newChart.yAxes.push(new am4charts.ValueAxis());\n        valueAxis.title.text = 'Waste per capita (kg)';\n        valueAxis.title.fontWeight = 'bold';\n\n        // Series\n        const countryASeries = newChart.series.push(new am4charts.LineSeries());\n        countryASeries.dataFields.valueY = 'countryA';\n        countryASeries.dataFields.dateX = 'date';\n        countryASeries.tooltipText = '{countryA}';\n        countryASeries.tooltip.pointerOrientation = 'vertical';\n\n        //TODO fix tooltip colors\n        countryASeries.strokeWidth = 4;\n        countryASeries.stroke = am4core.color('#4ea7ff');\n\n        setSeriesA(countryASeries);\n\n        const countryBSeries = newChart.series.push(new am4charts.LineSeries());\n        countryBSeries.dataFields.valueY = 'countryB';\n        countryBSeries.dataFields.dateX = 'date';\n        countryBSeries.tooltipText = '{countryB}';\n        countryBSeries.tooltip.pointerOrientation = 'vertical';\n\n        countryBSeries.strokeWidth = 4;\n        countryBSeries.stroke = am4core.color('#ff6720');\n\n        setSeriesB(countryBSeries);\n\n        newChart.cursor = new am4charts.XYCursor();\n        newChart.cursor.fullWidthLineX = true;\n        newChart.cursor.xAxis = dateAxis;\n        newChart.cursor.lineX.strokeWidth = 0;\n        newChart.cursor.lineY.strokeWidth = 0;\n        newChart.cursor.lineX.fill = am4core.color('#000');\n        newChart.cursor.lineX.fillOpacity = 0.1;\n\n        newChart.legend = new am4charts.Legend();\n\n        setChart(newChart);\n    }, []);\n\n    useEffect(() => {\n        if (!data || !chart) return;\n\n        const transformedData = _.map(raceRange, (date) => {\n            const valA = parseInt(_.get(data, countryA)[0][date]);\n            const valB = parseInt(_.get(data, countryB)[0][date]);\n            if (!isNaN(valA) && !isNaN(valB)) return { date: new Date(date, 1, 1), countryA: valA, countryB: valB };\n        });\n\n        seriesA.name = countryA;\n        seriesB.name = countryB;\n        chart.data = transformedData;\n    }, [data, chart, countryA, countryB]);\n\n    const countries = _.map(data, (_, name) => name);\n\n    return (\n        <>\n            <div style={{ width: '100%', height: '100%' }}>\n                <form className={'d-flex justify-content-center p-2'}>\n                    <select\n                        value={countryA}\n                        onChange={(selected) => setCountryA(selected.target.value)}\n                        className={'mr-2'}\n                    >\n                        {_.map(countries, (c) => (\n                            <option value={c} key={c}>\n                                {c}\n                            </option>\n                        ))}\n                    </select>\n                    <select value={countryB} onChange={(selected) => setCountryB(selected.target.value)}>\n                        {_.map(countries, (c) => (\n                            <option value={c} key={c}>\n                                {c}\n                            </option>\n                        ))}\n                    </select>\n                </form>\n                <div id=\"linediv\" style={{ width: '100%', height: '100%' }} className={'border rounded'} />\n            </div>\n        </>\n    );\n}\n\nexport default Line;\n","import React, { useEffect, useState } from 'react';\nimport Papa from 'papaparse';\nimport _ from 'lodash';\n\nimport Map from './map/Map';\nimport mapPath from './res/data_for_visualisations.csv';\nimport wastePath from './res/data_bar_chart_race.csv';\nimport Race from './race/Race';\nimport Line from './line/Line';\n\nfunction App() {\n    const [mapData, setMapData] = useState();\n    const [raceData, setRaceData] = useState();\n    const [lineData, setlineData] = useState();\n    const [currentElement, setCurrentElement] = useState(2);\n\n    // Load data\n    useEffect(() => {\n        // TODO no duplication\n        fetch(mapPath)\n            .then((res) => res.text())\n            .then((text) => {\n                const csv = Papa.parse(text, { delimiter: ';', header: true });\n                setMapData(csv.data);\n            });\n        fetch(wastePath)\n            .then((res) => res.text())\n            .then((text) => {\n                const csv = Papa.parse(text, { delimiter: ';', header: true });\n                // Transform data\n\n                // TODO should probably not be here also is very hacked together and unsafe\n                const raceRange = Array.from({ length: 19 }, (_, i) => i + 2000);\n\n                setRaceData(\n                    _.reduce(\n                        raceRange,\n                        (acc, year) => {\n                            return {\n                                ...acc,\n                                [year]: _.map(csv.data, (country) => {\n                                    const value = _.get(country, year);\n                                    return { id: country['Country'], value: isNaN(value) ? '0' : value };\n                                }),\n                            };\n                        },\n                        {}\n                    )\n                );\n\n                setlineData(_.groupBy(csv.data, (country) => country.Country));\n            });\n    }, []);\n\n    const elements = [\n        <Map data={mapData} key={0} />,\n        <Race data={raceData} key={1} />,\n        <Line data={lineData} key={2} />,\n    ];\n\n    const handlePrev = () => {\n        if (currentElement === 0) setCurrentElement(elements.length - 1);\n        else setCurrentElement(currentElement - 1);\n    };\n\n    const handleNext = () => {\n        if (currentElement === elements.length - 1) setCurrentElement(0);\n        else setCurrentElement(currentElement + 1);\n    };\n\n    return (\n        <div className=\"App\" style={{ width: '100vw', height: '90vh' }}>\n            <button\n                onClick={handlePrev}\n                style={{\n                    position: 'absolute',\n                    width: 50,\n                    top: 0,\n                    left: 0,\n                    right: 0,\n                    bottom: 0,\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    zIndex: 99,\n                    border: 0,\n                    background: 'transparent',\n                    outline: 'none',\n                }}\n            >\n                <i className=\"fa fa-angle-double-left\" style={{ fontSize: '3em', opacity: '30%' }} />\n            </button>\n            <button\n                onClick={handleNext}\n                style={{\n                    position: 'absolute',\n                    width: 50,\n                    top: 0,\n                    left: 'calc(100% - 50px)',\n                    right: 0,\n                    bottom: 0,\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    zIndex: 99,\n                    border: 0,\n                    background: 'transparent',\n                    outline: 'none',\n                }}\n            >\n                <i className=\"fa fa-angle-double-right\" style={{ fontSize: '3em', opacity: '30%' }} />\n            </button>\n            {elements[currentElement]}\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}